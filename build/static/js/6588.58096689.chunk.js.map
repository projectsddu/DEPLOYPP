{"version":3,"file":"static/js/6588.58096689.chunk.js","mappings":"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","sources":["Utilities/HandleNull.js","ui-component/cards/GenericCards/ChipCard.js","ui-component/cards/Skeleton/TotalIncomeCard.js","views/Student_Views/Announcements/JSX/EmptyAnnouncement.jsx","views/Student_Views/Announcements/S_ViewAnnouncements.js","../node_modules/@material-ui/core/styles/cssUtils.js","../node_modules/@material-ui/styles/getThemeProps/getThemeProps.js"],"sourcesContent":["const handleNull = function (data) {\n    if (data == \"\" || data == undefined || data == null) {\n        return \"Not Defined!\"\n    }\n    else {\n        return data\n    }\n}\nexport default handleNull","import PropTypes from 'prop-types';\nimport React from 'react';\n\n// material-ui\nimport { makeStyles } from '@material-ui/styles';\nimport { Avatar, List, ListItem, ListItemAvatar, ListItemText, Typography } from '@material-ui/core';\n\n// project imports\n// import MainCard from './../../../ui-component/cards/MainCard';\nimport MainCard from '../MainCard';\n// import TotalIncomeCard from './../../../ui-component/cards/Skeleton/TotalIncomeCard';\nimport TotalIncomeCard from '../Skeleton/TotalIncomeCard';\n\n// assets\nimport TableChartOutlinedIcon from '@material-ui/icons/TableChartOutlined';\n\n\n\n//-----------------------|| DASHBOARD - TOTAL INCOME DARK CARD ||-----------------------//\n\nconst ChipCard = (props) => {\n    const type = props.type\n    // if (type === undefined) {\n    //     // type = theme.palette.primary.dark\n    // }\n    // else {\n    //     type = \"error\"\n    // }\n    // style constant\n    const useStyles = makeStyles((theme) => ({\n        card: {\n            backgroundColor: props.type === undefined ? theme.palette.primary.main : theme.palette.error.main,\n            color: theme.palette.primary.light,\n            overflow: 'hidden',\n            position: 'relative',\n            '&:after': {\n                content: '\"\"',\n                position: 'absolute',\n                width: '210px',\n                height: '210px',\n                background: 'linear-gradient(210.04deg, ' + theme.palette.primary[200] + ' -50.94%, rgba(144, 202, 249, 0) 83.49%)',\n                borderRadius: '50%',\n                top: '-30px',\n                right: '-180px'\n            },\n            '&:before': {\n                content: '\"\"',\n                position: 'absolute',\n                width: '210px',\n                height: '210px',\n                background: 'linear-gradient(140.9deg, ' + theme.palette.primary[200] + ' -14.02%, rgba(144, 202, 249, 0) 77.58%)',\n                borderRadius: '50%',\n                top: '-160px',\n                right: '-130px'\n            }\n        },\n        content: {\n            padding: '16px !important'\n        },\n        avatar: {\n            ...theme.typography.commonAvatar,\n            ...theme.typography.largeAvatar,\n            backgroundColor: theme.palette.primary[800],\n            color: '#fff'\n        },\n        primary: {\n            color: '#fff'\n        },\n        secondary: {\n            color: theme.palette.primary.light,\n            marginTop: '5px'\n        },\n        padding: {\n            paddingTop: 0,\n            paddingBottom: 0\n        }\n    }));\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n            {props.isLoading ? (\n                <TotalIncomeCard />\n            ) : (\n                <MainCard border={false} className={classes.card} contentClass={classes.content}>\n                    <List className={classes.padding}>\n                        <ListItem alignItems=\"center\" disableGutters className={classes.padding}>\n                            {props.data}\n                        </ListItem>\n                    </List>\n                </MainCard>\n            )}\n        </React.Fragment>\n    );\n};\n\nChipCard.propTypes = {\n    isLoading: PropTypes.bool\n};\n\nexport default ChipCard;\n","import React from 'react';\n\n// material-ui\nimport { makeStyles } from '@material-ui/styles';\nimport { Card, CardContent, List, ListItem, ListItemAvatar, ListItemText, Skeleton } from '@material-ui/core';\n\n// style constant\nconst useStyles = makeStyles({\n    content: {\n        padding: '16px !important'\n    },\n    padding: {\n        paddingTop: 0,\n        paddingBottom: 0\n    }\n});\n\n//-----------------------|| SKELETON - TOTAL INCOME DARK/LIGHT Card ||-----------------------//\n\nconst TotalIncomeCard = () => {\n    const classes = useStyles();\n    return (\n        <Card>\n            <CardContent className={classes.content}>\n                <List className={classes.padding}>\n                    <ListItem alignItems=\"center\" disableGutters className={classes.padding}>\n                        <ListItemAvatar>\n                            <Skeleton variant=\"rect\" width={44} height={44} />\n                        </ListItemAvatar>\n                        <ListItemText\n                            className={classes.padding}\n                            primary={<Skeleton variant=\"rect\" height={20} />}\n                            secondary={<Skeleton variant=\"text\" />}\n                        />\n                    </ListItem>\n                </List>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default TotalIncomeCard;\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { withStyles } from '@material-ui/styles';\nimport { useHistory } from 'react-router';\nimport { Grid, Button } from '@material-ui/core';\nimport { IconInfoCircle } from '@tabler/icons';\nimport { grey, red } from '@mui/material/colors';\nimport { blue, lightBlue } from '@material-ui/core/colors';\n\nconst WhiteTextTypography = withStyles({\n    root: {\n        color: '#FFFFFF'\n    }\n})(Typography);\n\n// button color\nconst color = blue[300]\n\nfunction EmptyAnnouncement() {\n    const history = useHistory();\n\n    return (\n        <>\n            <Grid container spacing={2}>\n                <Grid item xs={12} md={10}>\n                    <WhiteTextTypography variant=\"h2\">No announcement added yet</WhiteTextTypography>\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n\nexport default EmptyAnnouncement;\n","import React, { useState } from 'react'\nimport { Paper, Typography, Box, Grid, Button, ListItem, List } from \"@material-ui/core\"\nimport { useTheme } from '@material-ui/styles';\nimport MainCard from '../../../ui-component/cards/MainCard';\nimport SubCard from '../../../ui-component/cards/SubCard';\nimport { makeStyles } from '@material-ui/styles';\nimport { withStyles } from '@material-ui/styles';\nimport { color } from '@material-ui/system';\nimport { ClassNames } from '@emotion/react';\nimport { TextField } from '@material-ui/core';\nimport $ from \"jquery\"\nimport usePost from '../../../Utilities/UsePost';\nimport ParseDate from \"../../../Utilities/ParseDate\"\nimport HandleToast from '../../../Utilities/HandleToast'\nimport { ToastContainer, toast } from 'react-toastify';\nimport responsePipelineHandler from '../../../Utilities/ResponsePipelineHandler';\nimport UseFetch from '../../../Utilities/UseFetch';\nimport { useHistory } from \"react-router-dom\";\nimport SearchSection from '../../../layout/MainLayout/Header/SearchSection';\nimport ChipCard from '../../../ui-component/cards/GenericCards/ChipCard';\nimport EmptyAnnouncement from './JSX/EmptyAnnouncement';\nimport handleNull from '../../../Utilities/HandleNull';\n\nconst useStyles = makeStyles((theme) => ({\n    applyBtn: {\n        background: theme.palette.success.light,\n        color: theme.palette.success.dark,\n        '&:hover': {\n            background: theme.palette.success.main,\n            color: theme.palette.background.paper\n        }\n    },\n    applyDeadlineBtn: {\n        background: theme.palette.error.light,\n        color: theme.palette.error.dark,\n        '&:hover': {\n            background: theme.palette.error.main,\n            color: theme.palette.background.paper\n        }\n    },\n    crd: {\n        background: theme.palette.primary.light,\n        color: theme.palette.grey[700]\n    },\n    description: {\n        background: theme.palette.primary.light,\n        color: theme.palette.grey[700]\n    },\n    lightBlue: {\n        marginTop: 12,\n        background: theme.palette.primary.light,\n        color: theme.palette.grey[700]\n    }\n}));\n\nconst WhiteTextTypography = withStyles({\n    root: {\n        color: \"#FFFFFF\"\n    }\n})(Typography);\nconst LightBlueTextTypography = withStyles({\n    root: {\n        color: \"##e3f2fd\"\n    }\n})\n\nfunction S_ViewAnnoucements() {\n    const classes = useStyles();\n\n    const [search, setSearch] = useState(\"\")\n    const { required_data, loading } = UseFetch(\"/annoucement/getAllAnnoucements/\", \"GET\")\n\n    var annoucements = [];\n\n    if (!loading) {\n        annoucements = required_data[\"data\"];\n        if (required_data[\"data\"] != \"No Student data!\") {\n            annoucements = required_data['data'];\n        }\n        console.log(annoucements)\n    }\n\n    let history = useHistory();\n\n    function handleRedirect(id) {\n        history.push('/_student/announcement/view_announcement/' + id)\n    }\n\n    function handleSearch(e) {\n        console.log(e.target.value)\n        setSearch(e.target.value);\n        let searchText = e.target.value == \"\" ? \" \" : e.target.value\n        var root = document.getElementsByClassName(\"MuiGrid-root MuiGrid-container\")[0].children;\n        console.log(root)\n        for (let i = 0; i < root.length; i++) {\n            var elem = document.getElementById(root[i].id)\n            var elemText = elem.innerText.toLowerCase()\n            if (!elemText.includes(searchText.toLowerCase())) {\n                $(elem).hide()\n            }\n            else {\n                $(elem).show()\n            }\n        }\n    }\n\n    return (\n\n        <>\n            <MainCard title=\"View Announcements\">\n                <TextField\n                    label='Search'\n                    value={search}\n                    onChange={(e) => handleSearch(e)}\n                    fullWidth\n                >\n                </TextField>\n                <br /><br /><br />\n                {/* {loading ? \"\" : required_data['data'] == \"No Student data!\" ? <h1>No Announcements Data</h1> : */}\n                {loading ? \"\" :\n                    typeof annoucements == \"string\" ?\n                        (\n                            <>\n                                <Grid item>\n                                    <ChipCard loading={false} data={<EmptyAnnouncement />} />\n                                </Grid>\n                            </>\n                        )\n                        // <h1>No Announcements Data</h1> \n                        :\n                        <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 1, md: 1 }}>\n\n                            {annoucements.map((e) => (\n                                <Grid item xs={12} md={6} id={e.Announcement_ID}>\n                                    <SubCard title={e.Company_details[\"Company_name\"] + \" \" + (e.Passed_out_year == null || e.Passed_out_year == undefined ? e.Job_Role + \" for all batch year\" : \"- \" + e.Job_Role + \" for \" + ParseDate.getYear(e.Passed_out_year) + \" Batch\")}>\n                                        <Typography variant=\"h5\"></Typography>\n                                        <Grid container spacing={1}>\n                                            <Grid item xs={12} md={12}>\n                                                <Grid container spacing={1}>\n                                                    <Grid item xs={6} md={4}>\n                                                        <Typography variant=\"h4\" style={{ color: \"rgb(97, 97, 97)\" }}>Deadline: </Typography>\n                                                    </Grid>\n                                                    <Grid item xs={6} md={8}>\n                                                        <Typography variant=\"h5\" style={{ color: \"#828282\" }}>\n                                                            {ParseDate.ParseDate(e.Registration_Deadline, true)}\n                                                        </Typography>\n                                                    </Grid>\n                                                </Grid>\n                                            </Grid>\n                                            <Grid item xs={12} md={12}>\n                                                <Grid container spacing={1}>\n                                                    <Grid item xs={6} md={4}>\n                                                        <Typography variant=\"h4\" style={{ color: \"rgb(97, 97, 97)\" }}>Posted On: </Typography>\n                                                    </Grid>\n                                                    <Grid item xs={6} md={8}>\n                                                        <Typography variant=\"h5\" style={{ color: \"#828282\" }}>\n                                                            {ParseDate.ParseDate(e.Date_of_announcement, true)}\n                                                        </Typography>\n                                                    </Grid>\n                                                </Grid>\n                                            </Grid>\n                                            {/* <Grid item xs={12} md={12}>\n                                                <Grid container spacing={1}>\n                                                    <Grid item xs={6} md={4}>\n                                                        <Typography variant=\"h4\" style={{ color: \"rgb(97, 97, 97)\" }}>Visiting On: </Typography>\n                                                    </Grid>\n                                                    <Grid item xs={6} md={8}>\n                                                        <Typography variant=\"h5\" style={{ color: \"#828282\" }}>\n                                                            {handleNull(ParseDate.ParseDate(e.Date_of_Visit))}\n                                                        </Typography>\n                                                    </Grid>\n                                                </Grid>\n                                            </Grid> */}\n\n                                            <Grid item xs={12} md={12}>\n                                                <Grid container spacing={1}>\n                                                    <Grid item xs={6} md={4}>\n                                                        <Typography variant=\"h4\" style={{ color: \"rgb(97, 97, 97)\" }}>Job Location: </Typography>\n                                                    </Grid>\n                                                    <Grid item xs={6} md={8}>\n                                                        <Typography variant=\"h5\" style={{ color: \"#828282\" }}>\n                                                            {handleNull(e.Job_Location)}\n                                                        </Typography>\n                                                    </Grid>\n                                                </Grid>\n                                            </Grid>\n                                            <Grid item xs={12} md={12}>\n                                                <Grid container spacing={1}>\n                                                    <Grid item xs={6} md={4}>\n                                                        <Typography variant=\"h4\" style={{ color: \"rgb(97, 97, 97)\" }}>Job Role: </Typography>\n                                                    </Grid>\n                                                    <Grid item xs={6} md={8}>\n                                                        <Typography variant=\"h5\" style={{ color: \"#828282\" }}>\n                                                            {handleNull(e.Job_Role)}\n                                                        </Typography>\n                                                    </Grid>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n\n                                        <br />\n                                        {\n                                            new Date(Date.now()).getTime() > new Date(e.Registration_Deadline).getTime()\n                                                ?\n                                                <Button\n                                                    onClick={() => handleRedirect(e.Announcement_ID)}\n                                                    color='error' size='large' fullWidth className={classes.applyDeadlineBtn}>View Full Announcement</Button>\n                                                :\n                                                <Button onClick={() => handleRedirect(e.Announcement_ID)} size='large' fullWidth className={classes.applyBtn}>View Full Announcement</Button>\n                                        }\n                                    </SubCard>\n                                </Grid>\n                            ))}\n                        </Grid>\n                }\n            </MainCard>\n        </>\n    )\n}\n\nexport default S_ViewAnnoucements\n","export function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\nexport function toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\nexport function convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    let pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    } // Convert length in pixels to the output unit\n\n\n    let outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\nexport function fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\nexport function responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\n\n/* eslint-disable no-restricted-syntax */\nexport default function getThemeProps(params) {\n  const {\n    theme,\n    name,\n    props\n  } = params;\n\n  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {\n    return props;\n  }\n\n  const output = _extends({}, props); // Resolve default props, code borrow from React source.\n  // https://github.com/facebook/react/blob/15a8f031838a553e41c0b66eb1bcf1da8448104d/packages/react/src/ReactElement.js#L221\n\n\n  const defaultProps = theme.components[name].defaultProps;\n  let propName;\n\n  for (propName in defaultProps) {\n    if (output[propName] === undefined) {\n      output[propName] = defaultProps[propName];\n    }\n  }\n\n  return output;\n}"],"names":["data","undefined","props","type","classes","makeStyles","theme","card","backgroundColor","palette","primary","main","error","color","light","overflow","position","content","width","height","background","borderRadius","top","right","padding","avatar","typography","commonAvatar","largeAvatar","secondary","marginTop","paddingTop","paddingBottom","useStyles","isLoading","border","className","contentClass","alignItems","disableGutters","variant","WhiteTextTypography","withStyles","root","Typography","blue","useHistory","Grid","container","spacing","item","xs","md","applyBtn","success","dark","paper","applyDeadlineBtn","crd","grey","description","lightBlue","useState","search","setSearch","UseFetch","required_data","loading","annoucements","console","log","history","handleRedirect","id","push","MainCard","title","TextField","label","value","onChange","e","target","searchText","document","getElementsByClassName","children","i","length","elem","getElementById","innerText","toLowerCase","includes","$","show","hide","handleSearch","fullWidth","ChipCard","rowSpacing","columnSpacing","sm","map","Announcement_ID","SubCard","Company_details","Passed_out_year","Job_Role","ParseDate","style","Registration_Deadline","Date_of_announcement","handleNull","Job_Location","Date","now","getTime","Button","onClick","size","isUnitless","String","parseFloat","getUnit","input","match","toUnitless","convertLength","baseFontSize","toUnit","fromUnit","pxLength","outputLength","toFixed","alignProperty","grid","sizeBelow","sizeAbove","fontGrid","lineHeight","pixels","htmlFontSize","responsiveProperty","cssProperty","min","max","unit","breakpoints","transform","output","factor","forEach","breakpoint","Math","round","getThemeProps","params","name","components","defaultProps","propName","_extends"],"sourceRoot":""}