{"version":3,"file":"static/js/4944.15ccbf2f.chunk.js","mappings":"iYAuBe,SAASA,IACpB,IA6EMC,GA7EYC,EAAAA,EAAAA,IAAW,SAACC,GAAD,MAAY,CACrCC,cAAa,QACTC,MAAO,OACPC,SAAU,QACVC,WAAY,EACZC,cAAe,EACfC,aAAc,QACbN,EAAMO,YAAYC,KAAK,MAAQ,CAC5BL,SAAU,UAGlBM,WAAY,CACRC,IAAK,QAETC,YAAa,CACTC,MAAOZ,EAAMa,QAAQC,KAAK,MAG9BC,SAAU,CACNC,QAAS,GAEbC,SAAU,CACNC,WAAY,MACZC,UAAW,QAEfC,YAAa,CACTD,UAAW,EACXE,aAAc,GAElBC,cAAe,CACXV,MAAOZ,EAAMa,QAAQU,OAAOC,KAC5BC,gBAAiBzB,EAAMa,QAAQU,OAAOG,MACtCC,OAAQ,OACRX,QAAS,QACTY,YAAa,OAEjBC,gBAAiB,CACbjB,MAAOZ,EAAMa,QAAQiB,QAAQN,KAC7BC,gBAAiBzB,EAAMa,QAAQiB,QAAQJ,MACvCC,OAAQ,OACRX,QAAS,SAEbe,gBAAiB,CACbnB,MAAOZ,EAAMa,QAAQmB,QAAQR,KAC7BC,gBAAiBzB,EAAMa,QAAQmB,QAAQN,MACvCC,OAAQ,OACRX,QAAS,SAEbiB,kBAAmB,CACfrB,MAAOZ,EAAMa,QAAQmB,QAAQR,KAC7BC,gBAAiBzB,EAAMa,QAAQmB,QAAQN,MACvCQ,OAAQ,OACRC,YAAanC,EAAMa,QAAQmB,QAAQI,MAEvCC,kBAAmB,CACfzB,MAAOZ,EAAMa,QAAQyB,QAAQd,KAC7BC,gBAAiBzB,EAAMa,QAAQyB,QAAQZ,MACvCQ,OAAQ,OACRC,YAAanC,EAAMa,QAAQyB,QAAQF,MAEvCG,cAAe,CACXC,YAAa,QAEjBC,WAAY,CACRhB,gBAAiBzB,EAAMa,QAAQ6B,UAAUhB,OAE7CrB,cAAe,CACXA,cAAe,QAEnBsC,WAAY,CACRC,OAAQ,UACR5B,QAAS,OACT,UAAW,OAKH6B,GAChB,GAAmCC,EAAAA,EAAAA,GAAS,sCAAuC,QAA3EC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,QAIvB,OAHKA,GACDC,QAAQC,IAAIH,IAGZ,+BACI,SAAC,IAAD,CAAUI,MAAM,oBAAhB,UACI,SAAC,IAAD,UAEKH,EAAU,kBACPD,EAAa,KAASK,KAAI,SAACC,GACvB,OACI,iCAGI,iBAAKC,UAAWxD,EAAQ6C,WAAxB,WACI,UAAC,KAAD,CAAUY,WAAW,SAASD,UAAWxD,EAAQiB,SAAjD,WACI,SAAC,IAAD,WACI,SAAC,IAAD,mBAEJ,SAAC,IAAD,CAAcuB,SAAS,SAAC,IAAD,CAAYkB,QAAQ,KAApB,sBACvB,SAAC,IAAD,CAAyBF,UAAWxD,EAAQW,WAA5C,UACI,SAAC,KAAD,CAAMgD,WAAS,EAACC,eAAe,WAA/B,UACI,SAAC,KAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,UACI,SAAC,IAAD,CAAYJ,QAAQ,YAAYK,QAAQ,QAAQC,cAAY,EAACR,UAAWxD,EAAQa,YAAhF,SACKoD,IAAAA,UAAoBV,EAAKW,WAAW,eAMzD,SAAC,KAAD,CAAMP,WAAS,EAACQ,UAAU,SAASX,UAAWxD,EAAQyC,cAAtD,UACI,SAAC,KAAD,CAAMoB,MAAI,EAACC,GAAI,GAAIN,UAAWxD,EAAQO,cAAtC,UACI,cAAG6D,MAAO,CAAE,MAAS,WAArB,SAAmCb,EAAKc,kBAmBpD,SAAC,IAAD,CAASb,UAAWxD,EAAQsB,eAE5B","sources":["views/Student_Views/Notifications/AllNotifications.js"],"sourcesContent":["import React from 'react';\nimport MainCard from '../../../ui-component/cards/MainCard';\nimport SubCard from '../../../ui-component/cards/SubCard';\nimport UseFetch from '../../../Utilities/UseFetch';\nimport { makeStyles } from '@material-ui/styles';\nimport ParseDate from \"../../../Utilities/ParseDate\"\nimport {\n    Avatar,\n    Button,\n    Card,\n    CardContent,\n    Chip,\n    Divider,\n    Grid,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText,\n    Stack,\n    Typography\n} from '@material-ui/core';\n\nexport default function AllNotifications() {\n    const useStyles = makeStyles((theme) => ({\n        navContainer: {\n            width: '100%',\n            maxWidth: '330px',\n            paddingTop: 0,\n            paddingBottom: 0,\n            borderRadius: '10px',\n            [theme.breakpoints.down('sm')]: {\n                maxWidth: '300px'\n            }\n        },\n        listAction: {\n            top: '22px'\n        },\n        actionColor: {\n            color: theme.palette.grey[500]\n        },\n\n        listItem: {\n            padding: 0\n        },\n        sendIcon: {\n            marginLeft: '8px',\n            marginTop: '-3px'\n        },\n        listDivider: {\n            marginTop: 0,\n            marginBottom: 0\n        },\n        listChipError: {\n            color: theme.palette.orange.dark,\n            backgroundColor: theme.palette.orange.light,\n            height: '24px',\n            padding: '0 6px',\n            marginRight: '5px'\n        },\n        listChipWarning: {\n            color: theme.palette.warning.dark,\n            backgroundColor: theme.palette.warning.light,\n            height: '24px',\n            padding: '0 6px'\n        },\n        listChipSuccess: {\n            color: theme.palette.success.dark,\n            backgroundColor: theme.palette.success.light,\n            height: '24px',\n            padding: '0 6px'\n        },\n        listAvatarSuccess: {\n            color: theme.palette.success.dark,\n            backgroundColor: theme.palette.success.light,\n            border: 'none',\n            borderColor: theme.palette.success.main\n        },\n        listAvatarPrimary: {\n            color: theme.palette.primary.dark,\n            backgroundColor: theme.palette.primary.light,\n            border: 'none',\n            borderColor: theme.palette.primary.main\n        },\n        listContainer: {\n            paddingLeft: '56px'\n        },\n        uploadCard: {\n            backgroundColor: theme.palette.secondary.light\n        },\n        paddingBottom: {\n            paddingBottom: '16px'\n        },\n        itemAction: {\n            cursor: 'pointer',\n            padding: '16px',\n            '&:hover': {\n                // background: theme.palette.primary.light\n            }\n        }\n    }));\n    const classes = useStyles();\n    const { required_data, loading } = UseFetch(\"/notifications/getUserNotifications\", \"POST\")\n    if (!loading) {\n        console.log(required_data);\n    }\n    return (\n        <>\n            <MainCard title=\"All Notifications\">\n                <List>\n\n                    {loading ? \"Wait Loading...\" :\n                        required_data[\"data\"].map((elem) => {\n                            return (\n                                <>\n                                    {/* <SubCard> */}\n\n                                    <div className={classes.itemAction}>\n                                        <ListItem alignItems=\"center\" className={classes.listItem}>\n                                            <ListItemAvatar>\n                                                <Avatar>A</Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText primary={<Typography variant=\"h5\">Admin</Typography>} />\n                                            <ListItemSecondaryAction className={classes.listAction}>\n                                                <Grid container justifyContent=\"flex-end\">\n                                                    <Grid item xs={12}>\n                                                        <Typography variant=\"subtitle1\" display=\"block\" gutterBottom className={classes.actionColor}>\n                                                            {ParseDate.ParseDate(elem.dateAdded, true)}\n                                                        </Typography>\n                                                    </Grid>\n                                                </Grid>\n                                            </ListItemSecondaryAction>\n                                        </ListItem>\n                                        <Grid container direction=\"column\" className={classes.listContainer}>\n                                            <Grid item xs={12} className={classes.paddingBottom}>\n                                                <p style={{ \"color\": \"#5c5c5c\" }}>{elem.message}</p>\n                                            </Grid>\n                                            {/* <Grid item xs={12}> */}\n                                            {/* <Grid container>\n                                                        {elem.isSeen ? <>\n                                                            <Grid item>\n                                                                <Chip label=\"Read\" className={classes.listChipSuccess} />\n                                                            </Grid>\n                                                        </> : <><Grid item>\n                                                            <Chip label=\"Unread\" className={classes.listChipError} />\n                                                        </Grid>\n                                                            <Grid item>\n                                                                <Chip label=\"New\" className={classes.listChipWarning} />\n                                                            </Grid></>}\n\n                                                    </Grid> */}\n                                            {/* </Grid> */}\n                                        </Grid>\n                                    </div>\n                                    <Divider className={classes.listDivider} />\n                                    {/* </SubCard> */}\n                                    <br />\n\n                                </>\n                            )\n                        })\n                    }\n                </List>\n            </MainCard>\n        </>\n    );\n}\n"],"names":["AllNotifications","classes","makeStyles","theme","navContainer","width","maxWidth","paddingTop","paddingBottom","borderRadius","breakpoints","down","listAction","top","actionColor","color","palette","grey","listItem","padding","sendIcon","marginLeft","marginTop","listDivider","marginBottom","listChipError","orange","dark","backgroundColor","light","height","marginRight","listChipWarning","warning","listChipSuccess","success","listAvatarSuccess","border","borderColor","main","listAvatarPrimary","primary","listContainer","paddingLeft","uploadCard","secondary","itemAction","cursor","useStyles","UseFetch","required_data","loading","console","log","title","map","elem","className","alignItems","variant","container","justifyContent","item","xs","display","gutterBottom","ParseDate","dateAdded","direction","style","message"],"sourceRoot":""}