{"version":3,"file":"static/js/4573.d108df18.chunk.js","mappings":"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","sources":["Config/domainConfig.js","Utilities/HandleToast.js","Utilities/RedirectHandler.js","Utilities/ResponsePipelineHandler.js","Utilities/UsePostFile.js","views/Announcement/EditAnnouncement.js"],"sourcesContent":["const domainConfig = {\n    // \"domain\": process.env.React_App_DOMAIN\n    \"domain\": \"http://placement.ceddu.in\"\n}\n\nexport default domainConfig","const handleToast = function (params) {\n\n    const toast = params.HandleToast.toast\n    const data = params.data\n    const flag = params.HandleToast.flag\n    const customMessage = params.HandleToast.customMessage\n    let message = \"not defined\"\n    if (!flag) {\n        message = data[\"data\"]\n    }\n    else {\n        message = customMessage\n    }\n    if (data[\"status\"]) {\n        toast.success(message)\n    }\n    else {\n        toast.error(message)\n    }\n}\nexport default handleToast","import { useHistory } from \"react-router\"\nconst RedirectHandler = function (props) {\n    const history = useHistory()\n    const data = props.data\n    if (data[\"redirect\"]) {\n        history.push(data[\"redirectUrl\"])\n    }\n}\nexport default RedirectHandler","import handleToast from \"./HandleToast\"\nimport RedirectHandler from \"./RedirectHandler\"\nconst responsePipelineHandler = function (data, seq_no = 0) {\n    const executionSequence = [[RedirectHandler, handleToast], [handleToast]]\n    executionSequence[seq_no].forEach((func) => {\n        func(data)\n    })\n}\nexport default responsePipelineHandler\n","import { useState, useEffect } from 'react'\n\nconst UsePostFile = async (url, data, method = \"POST\") => {\n    try {\n        const formData = new FormData();\n        let all_keys = Object.keys(data)\n        for (let key in all_keys) {\n            // console.log(all_keys[key])\n            // formData[all_keys[key]] = data[all_keys[key]]\n            formData.append(all_keys[key], data[all_keys[key]])\n        }\n        // console.log(formData)\n        // formData.append('File', selectedFile);\n        console.log({\n            method: method,\n            headers: {\n                'Accept': 'application/json',\n                // 'Content-Type': 'multipart/form-data'\n            },\n            body: formData\n        })\n        let response = await fetch(\n            url,\n            {\n                method: method,\n                headers: {\n                    'Accept': 'application/json',\n                    // 'Content-Type': 'multipart/form-data'\n                },\n                body: formData\n            }\n        );\n        let res1 = await response.json();\n        return res1;\n    }\n\n    catch (err) {\n        console.log(err.toString())\n    }\n}\n\nexport default UsePostFile","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport MainCard from '../../ui-component/cards/MainCard';\nimport UsePost from '../../Utilities/UsePost';\nimport { makeStyles } from '@material-ui/styles';\nimport { styled } from '@mui/material/styles';\nimport DateTimePicker from '@mui/lab/DateTimePicker';\nimport {\n    // Card,\n    // Box,\n    TextField,\n    // MenuItem,\n    // FormControl,\n    // Radio,\n    // RadioGroup,\n    // FormLabel,\n    // FormControlLabel,\n    // Switch,\n    // FormGroup,\n    // Stack,\n    Button,\n    Checkbox\n} from '@material-ui/core';\n// import SecondaryAction from './../../ui-component/cards/CardSecondaryAction';\nimport Modal from '@mui/material/Modal';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DatePicker from '@mui/lab/DatePicker';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport UsePostFile from '../../Utilities/UsePostFile'\n// import HandleToast from '../../Utilities/HandleToast'\nimport { ToastContainer, toast } from 'react-toastify';\nimport responsePipelineHandler from '../../Utilities/ResponsePipelineHandler';\n// import UseFetch from '../../Utilities/UseFetch';\nimport { useLocation } from \"react-router-dom\";\nimport domainConfig from '../../Config/domainConfig';\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    frame: {\n        height: 'calc(100vh - 210px)',\n        border: '1px solid',\n        borderColor: theme.palette.primary.light\n    }\n}));\n\n\n// getting required data\n\n\n\n\n// Eligible Branches\n\n\n// const Branches = [\n//     {\n//         value: 'CE',\n//         label: 'Computer Engineering',\n//         checked: false\n//     },\n//     {\n//         value: 'IT',\n//         label: 'Information Technology',\n//         checked: false\n//     },\n//     {\n//         value: 'EC',\n//         label: 'Electronics & Communication',\n//         checked: false\n//     }\n// ];\n\nconst Item = styled(Paper)(({ theme }) => ({\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n}));\n\nconst Input = styled('input')({\n    display: 'none'\n});\n\nfunction AddAnnoucement() {\n    const [open, setOpen] = React.useState(false);\n    const handleOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    const [Branches, setBranches] = useState([\n        {\n            value: 'CE',\n            label: 'Computer Engineering',\n            checked: false\n        },\n        {\n            value: 'IT',\n            label: 'Information Technology',\n            checked: false\n        },\n        {\n            value: 'EC',\n            label: 'Electronics & Communication',\n            checked: false\n        }\n    ])\n\n    const [data, setData] = useState(undefined)\n    const id = useLocation().pathname.split(\"/\")[3]\n    useEffect(async () => {\n        const response = await fetch(\"/annoucement/getAnnoucement/\" + id, { method: \"GET\" });\n        let data1 = await response.json();\n        data1 = data1[\"data\"][0]\n        let b = Branches\n        for (let i = 0; i < Branches.length; i++) {\n            console.log(data1[\"Eligible_Branches\"], b[i].value)\n            for (let j = 0; j < data1[\"Eligible_Branches\"].length; j++) {\n                console.log(b[i].value, data1[\"Eligible_Branches\"][j].BranchName)\n                if (data1[\"Eligible_Branches\"][j].BranchName == b[i].value) {\n                    b[i].checked = true;\n                }\n            }\n        }\n        console.log(data1)\n        setData(data1)\n        setBranches(b)\n        // console.log(Branches, b)\n    }, [])\n\n    const [selectedFile, setSelectedFile] = useState();\n    const [isFilePicked, setIsFilePicked] = useState(false);\n\n\n\n\n\n    const changeHandler = (event) => {\n        // // console.log(event.target.files[0])\n        // const file_data = event.target.files[0]\n        // let temp = data\n        // temp[\"Job_Description_File\"] = file_data\n        // setData(temp)\n        console.log(event.target.files[0]['name']);\n        document.getElementById('fileUploadName').innerText = ' ' + event.target.files[0]['name'];\n        const file_data = event.target.files[0];\n        let temp = data;\n        temp['Job_Description_File'] = file_data;\n        setData(temp);\n    };\n\n    async function handleSubmit() {\n        handleOpen()\n        const temp = data\n        delete temp[\"Company_Details\"]\n        console.log(data)\n        const response = await UsePostFile(\"/annoucement/updateAnnoucement/\" + id, data, \"POST\")\n        console.log(response)\n        const params1 = {\n            data: response,\n            HandleToast: {\n                toast: toast,\n                flag: false,\n            }\n        }\n        // console.log(res);\n        handleClose()\n        responsePipelineHandler(params1, 1)\n        // if(response.)\n    }\n\n    function updateBranches(s) {\n        setBranches([].concat(s))\n    }\n\n    async function handleCheck(branchName) {\n        let branchesCopy = Branches\n        for (let i = 0; i < Branches.length; i++) {\n            let branchInfo = branchesCopy[i]\n            if (branchInfo.value == branchName) {\n                // console.log()\n                if (branchesCopy[i].checked == false) {\n                    branchesCopy[i].checked = true\n                }\n                else {\n                    branchesCopy[i].checked = false\n                }\n            }\n        }\n        let dataCopy = data\n        dataCopy[\"Eligible_Branches\"] = []\n        for (let i = 0; i < branchesCopy.length; i++) {\n            if (branchesCopy[i].checked == true) {\n                dataCopy[\"Eligible_Branches\"].push(branchesCopy[i].value)\n            }\n        }\n        setBranches(branchesCopy)\n        updateBranches(branchesCopy)\n        setData(dataCopy)\n        // console.log(Branches)\n        // console.log(data)\n    }\n    const style = {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        bgcolor: 'background.paper',\n        boxShadow: 24,\n        p: 4,\n    };\n\n    // console.log(\"from line 212\", data)\n\n    return (\n\n        <MainCard title=\"Edit Announcement\" >\n            <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <CircularProgress style={style} color=\"primary\" />\n            </Modal>\n            {data === undefined ? \"\" : console.log(data)}\n            <form enctype=\"multipart/form-data\">\n\n\n                <TextField\n                    fullWidth\n                    // required\n                    disabled\n                    label=\"Company Name\"\n                    id=\"companies\"\n                    // helperText=\"Enter Job Role\"\n                    value={data === undefined ? \"\" : data[\"Company_Details\"] === undefined ? \"\" : data[\"Company_Details\"]['Company_name']}\n                    onChange={(e) => {\n                        setData({ ...data, Job_Role: e.target.value });\n                    }}\n                />\n\n                <br />\n                <br />\n                <Grid container spacing={2}>\n                    {/* <Grid item xs={12} md={4}>\n                        <LocalizationProvider dateAdapter={AdapterDateFns}>\n                            <DatePicker\n                                label=\"Date of Visit\"\n                                // required\n                                value={data === undefined ? \"\" : data['Date_of_Visit']}\n                                onChange={(e) => {\n                                    setData({ ...data, Date_of_Visit: e });\n                                }}\n                                renderInput={(params) => <TextField fullWidth {...params} />}\n                                \n                            />\n                        </LocalizationProvider>\n                    </Grid> */}\n                    <Grid item xs={12} md={6}>\n                        <LocalizationProvider dateAdapter={AdapterDateFns}>\n                            <DatePicker\n                                label=\"Date of Annoucement\"\n                                // required\n                                value={data === undefined ? \"\" : data['Date_of_announcement']}\n                                onChange={(e) => {\n                                    setData({ ...data, Date_of_announcement: e });\n                                }}\n                                renderInput={(params) => <TextField fullWidth {...params} />}\n                            />\n                        </LocalizationProvider>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <LocalizationProvider dateAdapter={AdapterDateFns}>\n                            <DatePicker\n                                views={['year']}\n                                label=\"Passed Out Year\"\n                                // required\n                                value={data === undefined ? \"\" : data['Passed_out_year']}\n                                onChange={(e) => {\n                                    setData({ ...data, Passed_out_year: e });\n                                }}\n                                renderInput={(params) => <TextField fullWidth {...params} helperText={null} />}\n                            />\n                        </LocalizationProvider>\n                    </Grid>\n                </Grid>\n                <br />\n                <br />\n                <Grid container\n                    direction=\"row\">\n                    {/* <Checkbox value={\"Jenil\"} label={\"Jenil\"} /> */}\n                    {\n                        Branches.map((e) => {\n                            return (\n                                <>\n                                    <div>\n                                        <Checkbox\n                                            checked={e.checked}\n                                            value={e.value}\n                                            onClick={() => handleCheck(e.value)}\n                                        /><label>{e.label}</label>\n                                    </div>\n                                </>\n                            )\n                        })\n                    }\n                </Grid>\n                {/* <TextField\n                    fullWidth\n                    id=\"eligible-currencies\"\n                    select\n                    // required\n                    label=\"Select Branch\"\n                    value={data === undefined ? \"\" : data['Eligible_Branches']}\n                    onChange={(e) => {\n                        setData({ ...data, Eligible_Branches: e.target.value });\n                    }}\n                >\n                    {Branches.map((option) => (\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                        </MenuItem>\n                    ))}\n                </TextField> */}\n                <br />\n                <br />\n                <TextField\n                    fullWidth\n                    // required\n                    label=\"Job Role\"\n                    id=\"fullWidth\"\n                    helperText=\"Enter Job Role\"\n                    value={data === undefined ? \"\" : data['Job_Role']}\n                    onChange={(e) => {\n                        setData({ ...data, Job_Role: e.target.value });\n                    }}\n                />\n                <br />\n                <br />\n                <TextField\n                    fullWidth\n                    // required\n                    label=\"Salary\"\n                    id=\"fullWidth\"\n                    helperText=\"Enter Salary\"\n                    value={data === undefined ? \"\" : data['Salary']}\n                    onChange={(e) => {\n                        setData({ ...data, Salary: e.target.value });\n                    }}\n                />\n                <br />\n                <br />\n                <TextField\n                    fullWidth\n                    // required\n                    label=\"Job Location\"\n                    id=\"fullWidth\"\n                    helperText=\"Enter Job Location\"\n                    value={data === undefined ? \"\" : data['Job_Location']}\n                    onChange={(e) => {\n                        setData({ ...data, Job_Location: e.target.value });\n                    }}\n                />\n                <br />\n                <br />\n                <TextField\n                    fullWidth\n                    // required\n                    label=\"Bond Details\"\n                    id=\"fullWidth\"\n                    helperText=\"Enter Bond Details\"\n                    value={data === undefined ? \"\" : data['Bond_Details']}\n                    onChange={(e) => {\n                        setData({ ...data, Bond_Details: e.target.value });\n                    }}\n                />\n                <br />\n                <br />\n                <TextField\n                    fullWidth\n                    // required\n                    label=\"Other Details\"\n                    id=\"fullWidth\"\n                    multiline\n                    rows={5}\n                    maxRows={4}\n                    helperText=\"Enter Other Details\"\n                    value={data === undefined ? \"\" : data['Other_Details']}\n                    onChange={(e) => {\n                        setData({ ...data, Other_Details: e.target.value });\n                    }}\n                />\n                <br />\n                <br />\n                <Grid container direction=\"row\" justifyContent=\"flex-start\" alignItems=\"center\" spacing={2}>\n                    <Grid item>\n                        <label htmlFor=\"contained-button-file\">\n                            {/* <label>Job Description File</label>    */}\n                            <Input onChange={changeHandler}\n                                // required\n                                // accept=\"image/*\"\n                                id=\"contained-button-file\" multiple type=\"file\" />\n                            <Button variant=\"outlined\" component=\"span\">\n                                Upload Job Description File\n                            </Button>\n                            <label id=\"fileUploadName\"> </label>\n                        </label>\n                    </Grid>\n                    <Grid item>\n                        <a target='_blank' style={{ \"text-decoration\": \"none\" }} href={\n\n\n\n                            data === undefined ? \"\" :\n                                process.env.NODE_ENV == \"production\" ?\n                                    // \"http://csiddu.tech\" + \n                                    domainConfig.domain +\n                                    data[\"Job_Description_File\"]\n                                    : \"http://localhost:8000\" + data[\"Job_Description_File\"]\n                        }>\n                            <Button variant=\"contained\">View Job Description File</Button>\n                        </a>\n                        {/* {data[\"Job_Description_File\"] != undefined ?\n                            <a target='_blank' style={{ \"text-decoration\": \"none\" }} href={\n                                data === undefined ? \"\" :\n                                    process.env.NODE_ENV == \"production\" ?\n                                        // \"http://csiddu.tech\" + \n                                        domainConfig.domain +\n                                        data[\"Job_Description_File\"]\n                                        : \"http://localhost:8000\" + data[\"Job_Description_File\"]\n                            }>\n                                <Button variant=\"contained\">View Job Description File</Button>\n                            </a>\n                            :\n                            <>\n                                <Chip variant=\"filled\" label=\"No Job Description File\" />\n                            </>\n                        } */}\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                        <LocalizationProvider dateAdapter={AdapterDateFns}>\n                            {/* <DatePicker\n                                label=\"Registration Deadline\"\n                                // required\n                                value={data === undefined ? \"\" : data['Registration_Deadline']}\n                                onChange={(e) => {\n                                    setData({ ...data, Registration_Deadline: e });\n                                }}\n                                renderInput={(params) => <TextField {...params} />}\n                            /> */}\n                            <DateTimePicker\n                                label=\"Registration Deadline\"\n                                value={data === undefined ? \"\" : data['Registration_Deadline']}\n                                onChange={(e) => {\n                                    setData({ ...data, Registration_Deadline: e });\n                                }}\n                                renderInput={(params) => <TextField {...params} />}\n                            />\n\n                        </LocalizationProvider>\n                    </Grid>\n                    {/* <Grid item>\n                        <LocalizationProvider dateAdapter={AdapterDateFns}>\n                            <DatePicker\n                                views={['year']}\n                                required\n                                label=\"Passed Out Year\"\n                                value={data['Registration_Deadline']}\n                                onChange={(e) => {\n                                    setData({ ...data, Registration_Deadline: e });\n                                }}\n                                renderInput={(params) => <TextField {...params} helperText={null} />}\n                            />\n                        </LocalizationProvider>\n                    </Grid> */}\n                </Grid>\n                <br />\n                <br />\n\n                <TextField\n                    fullWidth\n                    // required\n                    label=\"Eligibility\"\n                    id=\"fullWidth\"\n                    helperText=\"Eligibility\"\n                    value={data === undefined ? \"\" : data['Eligibility']}\n                    onChange={(e) => {\n                        setData({ ...data, Eligibility: e.target.value });\n                    }}\n                />\n                <Grid container\n                    direction=\"row\">\n                    <Grid item>\n\n                        <Checkbox value={\"Jenil\"} label=\"Send Email\"\n                            onClick={(e) => {\n                                setData({ ...data, sendMail: e.target.checked });\n                                // console.log(e.target.checked)\n                            }}\n                        /><label>Send Email</label>\n                    </Grid>\n                </Grid>\n                <br />\n                <br />\n                <Button onClick={handleSubmit} variant=\"contained\" size=\"large\" color=\"primary\">\n                    Update\n                </Button>\n\n            </form>\n\n        </MainCard>\n    );\n}\n\nexport default AddAnnoucement;\n"],"names":["params","toast","HandleToast","data","flag","customMessage","message","success","error","props","history","useHistory","push","seq_no","executionSequence","RedirectHandler","handleToast","forEach","func","UsePostFile","url","key","method","formData","FormData","all_keys","Object","keys","append","console","log","headers","body","fetch","response","json","res1","toString","Input","makeStyles","theme","frame","height","border","borderColor","palette","primary","light","styled","Paper","typography","body2","padding","spacing","textAlign","color","text","secondary","display","React","open","setOpen","handleOpen","handleClose","useState","value","label","checked","Branches","setBranches","undefined","setData","id","useLocation","pathname","split","useEffect","data1","b","i","length","j","BranchName","params1","responsePipelineHandler","updateBranches","s","concat","branchName","branchesCopy","dataCopy","title","onClose","style","position","top","left","bgcolor","boxShadow","p","enctype","fullWidth","disabled","onChange","e","Job_Role","target","container","item","xs","md","dateAdapter","AdapterDateFns","Date_of_announcement","renderInput","views","Passed_out_year","helperText","direction","map","onClick","handleCheck","Salary","Job_Location","Bond_Details","multiline","rows","maxRows","Other_Details","justifyContent","alignItems","htmlFor","event","files","document","getElementById","innerText","file_data","temp","multiple","type","variant","component","href","domainConfig","Registration_Deadline","Eligibility","sendMail","size"],"sourceRoot":""}