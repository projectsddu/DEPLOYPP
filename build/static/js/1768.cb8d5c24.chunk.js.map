{"version":3,"file":"static/js/1768.cb8d5c24.chunk.js","mappings":"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","sources":["views/Student_Views/Login/ForgotPassword.js","../node_modules/@material-ui/icons/CheckCircle.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport { Button, OutlinedInput, TextField } from '@material-ui/core';\nimport { ToastContainer, toast } from 'react-toastify';\nimport responsePipelineHandler from '../../../Utilities/ResponsePipelineHandler'\nimport { makeStyles } from '@material-ui/styles';\nimport {\n    Box,\n\n    Checkbox,\n    FormControl,\n    FormControlLabel,\n    FormHelperText,\n    IconButton,\n    InputAdornment,\n    InputLabel,\n} from '@material-ui/core';\n// import Visibility from '@material-ui/icons/Visibility';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport { useTheme } from '@material-ui/core';\n// import CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport { Divider, Grid, Stack, Typography, useMediaQuery } from '@material-ui/core';\nimport axios from \"axios\"\n// project imports\nimport AuthWrapper1 from './AuthWrapper1';\n// import Logo from './../../../../ui-component/Logo';\nimport Logo from './../../../layout/MainLayout/LogoSection/index';\nimport AuthCardWrapper from './AuthCardWrapper';\nimport RestLogin from './RestLogin';\nimport AuthFooter from './../../../ui-component/cards/AuthFooter';\nimport UsePost from \"../../../Utilities/UsePost\"\nimport { useHistory } from \"react-router-dom\"\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\n\n\n\n\nfunction ForgotPassword() {\n    const useStyles = makeStyles((theme) => ({\n        redButton: {\n            fontSize: '1rem',\n            fontWeight: 500,\n            backgroundColor: theme.palette.grey[50],\n            border: '1px solid',\n            borderColor: theme.palette.grey[100],\n            color: theme.palette.grey[700],\n            textTransform: 'none',\n            '&:hover': {\n                backgroundColor: theme.palette.primary.light\n            },\n            [theme.breakpoints.down('sm')]: {\n                fontSize: '0.875rem'\n            }\n        },\n        signDivider: {\n            flexGrow: 1\n        },\n        signText: {\n            cursor: 'unset',\n            margin: theme.spacing(2),\n            padding: '5px 56px',\n            borderColor: theme.palette.grey[100] + ' !important',\n            color: theme.palette.grey[900] + '!important',\n            fontWeight: 500\n        },\n        loginIcon: {\n            marginRight: '16px',\n            [theme.breakpoints.down('sm')]: {\n                marginRight: '8px'\n            }\n        },\n        loginInput: {\n            ...theme.typography.customInput\n        }\n    }));\n    const classes = useStyles();\n    const history = useHistory()\n    // const [showPassword, setShowPassword] = React.useState(false);\n    const handleClickShowPassword = () => {\n        setShowPassword(!showPassword);\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n    const handleSubmit = async () => {\n\n    }\n    const [data, setData] = useState({\n        studentId: \"\",\n        otp: \"\",\n        newPassword: \"\",\n        confirmNewPassword: \"\"\n    })\n\n    // Allowed states studId,EnteringOtp,VerifedOtp\n    const [currentState, setCurrentState] = useState({ state: \"stud_id\" })\n\n    const theme = useTheme();\n    const matchDownSM = useMediaQuery(theme.breakpoints.down('sm'));\n    const [showPassword, setShowPassword] = useState(false)\n\n\n    const handleVerifyStudentId = async function () {\n        try {\n            if (data.studentId.length == 10) {\n                let url = \"/studentLogin/sendOtp/\" + data.studentId\n                let res = await axios.post(url)\n                const params1 = {\n                    data: res.data,\n                    HandleToast: {\n                        toast: toast,\n                        flag: false,\n                    }\n                }\n                // console.log(res.data)\n                if (res.data[\"data\"] == \"Login using first time password!\") {\n                    history.push(\"/_student/login/\")\n                }\n                if (res.data.status) {\n                    setCurrentState({ state: \"verifyOtp\" })\n                }\n                responsePipelineHandler(params1, 1)\n            }\n            else {\n                toast.error(\"Enter a valid student ID\")\n            }\n\n        }\n        catch (err) {\n            console.log(err)\n        }\n    }\n\n    const handelVerifyOtp = async () => {\n        try {\n            const url = \"/studentLogin/verifyOtp/\" + data.studentId\n            const res = await UsePost(url, data, \"POST\")\n            const params1 = {\n                data: res,\n                HandleToast: {\n                    toast: toast,\n                    flag: false,\n                }\n            }\n            if (res.status) {\n\n                setCurrentState({ state: \"changePassword\" })\n            }\n            responsePipelineHandler(params1, 1)\n        }\n        catch (err) {\n\n        }\n    }\n\n    async function handleChangePassowrd() {\n        try {\n            console.log(\"Here\")\n            setCurrentState({ state: \"changingPassword\" })\n            const url = \"/studentLogin/forgotChangePassword\"\n            console.log(\"Here\", url)\n            const res = await UsePost(url, data, \"POST\")\n            console.log(\"Here\", \"Respinse sent\")\n            const params1 = {\n                data: res,\n                HandleToast: {\n                    toast: toast,\n                    flag: false,\n                }\n            }\n            console.log(res)\n            if (res.status) {\n                setCurrentState({ state: \"passwordChanged\" })\n            }\n            else {\n                toast.error(\"Please try again.\")\n\n            }\n            history.push(\"/_student/login\")\n            responsePipelineHandler(params1, 1)\n        }\n        catch (err) {\n            console.log(err.toString())\n        }\n    }\n\n    return (\n        <AuthWrapper1>\n            <Grid container direction=\"column\" justifyContent=\"flex-end\" sx={{ minHeight: '95vh' }}>\n                <Grid item xs={12}>\n                    <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ minHeight: 'calc(100vh - 68px)' }}>\n                        <Grid item sx={{ m: { xs: 1, sm: 3 }, mb: 0 }}>\n                            <AuthCardWrapper>\n                                <Grid container spacing={2} alignItems=\"center\" justifyContent=\"center\">\n                                    <Grid style={{ marginLeft: \"-8%\" }} item sx={{ mb: 3 }} >\n                                        <RouterLink to=\"#\">\n                                            <Logo />\n                                        </RouterLink>\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <Grid\n                                            container\n                                            direction={matchDownSM ? 'column-reverse' : 'row'}\n                                            alignItems=\"center\"\n                                            justifyContent=\"center\"\n                                        >\n                                            <Grid item>\n                                                <Stack alignItems=\"center\" justifyContent=\"center\" spacing={1}>\n                                                    <Typography\n                                                        color={theme.palette.grey}\n                                                        gutterBottom\n                                                        variant={matchDownSM ? 'h3' : 'h2'}\n                                                    >\n                                                        Dharmsinh Desai University\n                                                    </Typography>\n                                                    <Typography variant=\"caption\" fontSize=\"16px\" textAlign={matchDownSM ? 'center' : ''}>\n                                                        Forgot your password. We'll change it for you                                                    </Typography>\n                                                </Stack>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <FormControl fullWidth\n                                            className={classes.loginInput}>\n                                            <InputLabel htmlFor=\"outlined-adornment-email-login\">Student ID</InputLabel>\n                                            <OutlinedInput\n                                                value={data.studentId}\n                                                onChange={(e) => {\n                                                    setData({ ...data, studentId: e.target.value });\n                                                }}\n                                                disabled={currentState.state == \"stud_id\" ? false : true}\n                                                inputProps={{\n                                                    classes: {\n                                                        notchedOutline: classes.notchedOutline\n                                                    }\n                                                }}\n                                                endAdornment={\n                                                    currentState.state == \"stud_id\" ? false :\n                                                        <InputAdornment position=\"end\">\n                                                            <IconButton\n                                                                edge=\"end\"\n                                                            >\n                                                                <CheckCircleIcon />\n                                                            </IconButton>\n                                                        </InputAdornment>\n                                                }\n                                            />\n                                        </FormControl>\n                                        {currentState.state == \"stud_id\" ?\n                                            <>\n                                                <br />\n                                                <br />\n                                                {/* <br /> */}\n                                                <Button\n                                                    onClick={() => handleVerifyStudentId()}\n                                                    fullWidth variant=\"contained\" size=\"large\">Verify Student Id</Button>\n                                            </> : \"\"\n                                        }\n                                        {\n                                            currentState.state == \"verifyOtp\" || currentState.state == \"changePassword\" || currentState.state == \"changingPassword\" || currentState.state == \"passwordChanged\" ? <>\n                                                <FormControl fullWidth\n                                                    className={classes.loginInput}>\n                                                    <InputLabel htmlFor=\"outlined-adornment-email-login\">Enter OTP</InputLabel>\n                                                    <OutlinedInput\n                                                        value={data.otp}\n                                                        onChange={(e) => {\n                                                            setData({ ...data, otp: e.target.value });\n                                                        }}\n                                                        disabled={currentState.state == \"verifyOtp\" ? false : true}\n                                                        inputProps={{\n                                                            classes: {\n                                                                notchedOutline: classes.notchedOutline\n                                                            }\n                                                        }}\n                                                        endAdornment={\n                                                            currentState.state == \"verifyOtp\" ? false :\n                                                                <InputAdornment position=\"end\">\n                                                                    <IconButton\n                                                                        edge=\"end\"\n                                                                    >\n                                                                        <CheckCircleIcon />\n                                                                    </IconButton>\n                                                                </InputAdornment>\n                                                        }\n                                                    />\n                                                </FormControl>\n                                                {\n                                                    currentState.state == \"verifyOtp\" ?\n                                                        <Button\n                                                            onClick={() => handelVerifyOtp()}\n                                                            fullWidth\n                                                            variant=\"contained\"\n                                                            size=\"large\">\n                                                            Verify  OTP\n                                                        </Button>\n                                                        : \"\"\n                                                }\n                                            </> : \"\"\n                                        }\n                                        {\n                                            currentState.state == \"changePassword\" || currentState.state == \"changingPassword\" || currentState.state == \"passwordChanged\" ? <>\n\n                                                <FormControl fullWidth\n                                                    className={classes.loginInput}>\n                                                    <InputLabel htmlFor=\"outlined-adornment-email-login\">Enter New Password</InputLabel>\n                                                    <OutlinedInput\n                                                        type={showPassword ? 'text' : 'password'}\n                                                        value={data.newPassword}\n                                                        onChange={(e) => {\n                                                            setData({ ...data, newPassword: e.target.value });\n                                                        }}\n                                                        disabled={currentState.state == \"changePassword\" ? false : true}\n                                                        inputProps={{\n                                                            classes: {\n                                                                notchedOutline: classes.notchedOutline\n                                                            }\n                                                        }}\n                                                        endAdornment={\n                                                            currentState.state == \"changePassword\" ? false :\n                                                                // <InputAdornment position=\"end\">\n                                                                //     <IconButton\n                                                                //         edge=\"end\"\n                                                                //     >\n                                                                //         <CheckCircleIcon />\n                                                                //     </IconButton>\n                                                                // </InputAdornment>\n                                                                <IconButton\n                                                                    aria-label=\"toggle password visibility\"\n                                                                    onClick={handleClickShowPassword}\n                                                                    onMouseDown={handleMouseDownPassword}\n                                                                    edge=\"end\"\n                                                                >\n                                                                    {currentState.state == \"changePassword\" ? showPassword ? <Visibility /> : <VisibilityOff /> : <CheckCircleIcon />}\n                                                                </IconButton>\n                                                        }\n                                                    />\n                                                </FormControl>\n                                                <FormControl fullWidth\n\n                                                    className={classes.loginInput}>\n                                                    <InputLabel htmlFor=\"outlined-adornment-email-login\">Confirm New Password</InputLabel>\n                                                    <OutlinedInput\n                                                        type={showPassword ? 'text' : 'password'}\n                                                        value={data.confirmNewPassword}\n                                                        onChange={(e) => {\n                                                            setData({ ...data, confirmNewPassword: e.target.value });\n                                                        }}\n                                                        disabled={currentState.state == \"changePassword\" ? false : true}\n                                                        inputProps={{\n                                                            classes: {\n                                                                notchedOutline: classes.notchedOutline\n                                                            }\n                                                        }}\n                                                        endAdornment={\n                                                            currentState.state == \"changePassword\" ? false :\n                                                                <InputAdornment position=\"end\">\n                                                                    <IconButton\n                                                                        edge=\"end\"\n                                                                    >\n                                                                        <CheckCircleIcon />\n                                                                    </IconButton>\n                                                                </InputAdornment>\n                                                        }\n                                                    />\n                                                </FormControl>\n                                            </> : \"\"\n                                        }\n                                        {\n                                            currentState.state == \"changePassword\" ?\n                                                <Button\n                                                    fullWidth\n                                                    variant=\"contained\"\n                                                    size=\"large\"\n                                                    onClick={() => handleChangePassowrd()}\n                                                >Change Password</Button> : \"\"\n                                        }\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <Divider />\n                                    </Grid>\n\n                                </Grid>\n                            </AuthCardWrapper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                {/* <Grid item xs={12} sx={{ m: 3, mt: 1 }}>\n                    <AuthFooter />\n                </Grid> */}\n            </Grid>\n        </AuthWrapper1>\n    )\n}\n\nexport default ForgotPassword","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckCircle');\n\nexports.default = _default;"],"names":["useStyles","makeStyles","theme","redButton","fontSize","fontWeight","backgroundColor","palette","grey","border","borderColor","color","textTransform","primary","light","breakpoints","down","signDivider","flexGrow","signText","cursor","margin","spacing","padding","loginIcon","marginRight","loginInput","typography","customInput","classes","history","useHistory","useState","studentId","otp","newPassword","confirmNewPassword","data","setData","state","currentState","setCurrentState","useTheme","matchDownSM","useMediaQuery","showPassword","setShowPassword","handleVerifyStudentId","length","url","axios","res","params1","HandleToast","toast","flag","push","status","responsePipelineHandler","console","log","handelVerifyOtp","UsePost","toString","container","direction","justifyContent","sx","minHeight","item","xs","alignItems","m","sm","mb","style","marginLeft","to","gutterBottom","variant","textAlign","fullWidth","className","htmlFor","value","onChange","e","target","disabled","inputProps","notchedOutline","endAdornment","position","edge","onClick","size","type","onMouseDown","event","preventDefault","handleChangePassowrd","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}